install.packages('xpath')
install.packages('xm,l')
install.packages('xml')
install.packages('XML')
install.packages('XML2')
install.packages('xml2')
library(xml2)
setwd("~/Glace speedrun stuff/map files/level maps tiled")
xmlParse()
library(XML)
read_xml(file("frosty1_map.tmx"))
read_xml("frosty1_map.tmx"
read_xml("frosty1_map.tmx")
read_xml("frosty1_map.tmx")
read_xml("frosty1_map.tmx") -> teste
View(teste)
test1 <- teste[["/map/objectgroup/object[@gid='172]"]]
test1 <- teste["/map/objectgroup/object[@gid='172]"]
test1 <- teste["/map/objectgroup/object[@gid='172]"]
View(test1)
test1 <- teste[/map/objectgroup/object[@gid='172]]
test1 <- teste[["//object[gid='172']"]]
test1 <- teste[["//object[@gid='172']"]]
test1 <- teste[[".//object[@gid='172']"]]
test1 <- teste[".//object[@gid='172']"]
View(test1)
View(test1)
test1 <- teste[".//object"]
test1 <- 5
test1 <- c(5,6,7)
test1 <- data.frame(c(5,6,7))
View(test1)
test1 <- teste[".//@id"]
View(test1)
test1 <- teste["//@id"]
View(test1)
number()
library(scales)
number()
teste["//objectgroup/object[1]"]
teste[//objectgroup/object[1]]
string(//objectgroup/object[1]/@id)
string('//objectgroup/object[1]/@id')
number('//objectgroup/object[1]/@id')
teste['//objectgroup/object[1]/@id']
teste[string('//objectgroup/object[1]/@id')]
teste[('//objectgroup/object[1]/@id')]
teste[['//objectgroup/object[1]/@id']]
teste['//objectgroup/object[1]/@id']
xml_find_all(tese, //objectgroup/object)
xml_find_all(tese, "//objectgroup/object")
xml_find_all(teste, "//objectgroup/object")
xml_find_all(teste, "//objectgroup/object[@id='1']")
xml_find_all(teste, string("//objectgroup/object[1]/@id")
xml_find_all(teste, string("//objectgroup/object[1]/@id"))
xml_find_all(teste, "string(//objectgroup/object[1]/@id)")
xml_find_all(teste, "//objectgroup/object/@id")
xml_find_all(teste, "//objectgroup/object[1]/@id")
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"),id)
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"),@id)
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), '@id')
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), 'id')
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), 'id') -> tese1
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), 'id', ns = character()) -> tese1
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), 'id', ns = character())
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), 'id', ns = number())
xml_attr(xml_find_all(teste, "//objectgroup/object[1]"), 'id')
as.numeric(tese1)
as.numeric(tese1) -> tese2
setwd("~/")
#######################
#Set paths:
tmxPath = "Glace speedrun stuff/map files/level maps tiled/grass1_map.tmx"
tsPath = "path/to/tileset"
glacePath = "path/to/glace/folder"
#Set new level name:
levelName = "name_of_level" #This needs to match one of the existing level names
#Set various values
numBeads = 3
#######################
library(xml2)
map <- read_xml(tmxPath)
rm(test1,teste)
rm(glacePath,levelName,numBeads)
rm(tese1,tese2)
rm(tsPath)
View(map)
mapWidth = as.numeric(xml_attr(xml_find_first(map, '/map'), 'width'))
mapHeight = as.numeric(xml_attr(xml_find_first(map, '/map'), 'height'))
library(tidyverse)
library(sf)
library(wellknown)
library(data.table)
setwd("~/RA_Microtransit/beam/test/input/slc_test_fence/slc_test_GIS/UTA_Zone")
#read in shapefile
shapefile = "Polygons.shp"
#read in shapefile
shapefile = "Polygons.shp"
#tabulate the shapefile
fleet_org <- st_read(shapefile)%>%
select(area_id,fleet_id,fleet_size,x_coord,y_coord,veh_type,manager_id,geometry)%>%
mutate(num = 1:n())
